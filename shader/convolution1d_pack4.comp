#version 450
//layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif


#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

layout (constant_id = 0) const int kernel_w = 1;
layout (constant_id = 1) const int dilation_w = 1;
layout (constant_id = 2) const int stride_w = 1;
layout (constant_id = 3) const int bias_term = 0;
layout (constant_id = 4) const int activation_type = 0;
layout (constant_id = 5) const float activation_param_0 = 0;
layout (constant_id = 6) const float activation_param_1 = 0;

#define shape_constant_id_offset 7
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D weight_blob;
layout (binding = 3) uniform unfp sampler3D bias_blob;
#else
//layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };

//layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };

//layout (binding = 2) readonly buffer weight_blob { sfp weight_data[]; };
//layout (binding = 3) readonly buffer bias_blob { sfp bias_data[]; };
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
#else
//layout (binding = 2) readonly buffer weight_blob { sfpmat4 weight_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
//layout (binding = 2) readonly buffer weight_blob { sfp weight_data[]; };

#endif
layout (binding = 3) readonly buffer bias_blob { sfpvec4 bias_data[]; };

#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;


void main()
{

    int gx = int(gl_GlobalInvocationID.x) * 2;
    int gy = int(gl_GlobalInvocationID.y) * 2;
    int gz = int(gl_GlobalInvocationID.z) * 2;

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    const ivec2 gx2 = gx + ivec2(0, 1);
    const ivec2 gy2 = gy + ivec2(0, 1);
    const ivec2 gz2 = gz + ivec2(0, 1);
	
	afpvec4 sum20 = afpvec4(0.0f);
	afpvec4 sum21 = afpvec4(0.0f);
	afpvec4 sum22 = afpvec4(0.0f);
	afpvec4 sum23 = afpvec4(0.0f);	
	
    if (bias_term == 1)
    {
#if NCNN_image_shader
        sum = image2d_ld1(bias_blob, ivec2(gx, 0));
#else
		sum20 = buffer_ld4(bias_data, gy2.x);
		sum21 = sum20;
		
		sum22 = buffer_ld4(bias_data, gy2.y);
		sum23 = sum22;
#endif
    }

#if NCNN_image_shader
	//
#else
			ivec2 w_offsetv = kernel_w * psc(h) * 4 * gy2;
			for (int iny = 0; iny < psc(h); iny++)
			{
				ivec2 v_offsetv = iny * psc(w) + gx2 * stride_w;
				
				for (int x = 0; x < kernel_w; x++)
				{
					afpvec4 v0 = buffer_ld4(bottom_blob_data, v_offsetv.x + x * dilation_w);
					afpvec4 v1 = buffer_ld4(bottom_blob_data, v_offsetv.y + x * dilation_w);

					afpvec4 u0 = buffer_ld4(weight_data, (w_offsetv.x + x) + kernel_w * 0);
					afpvec4 u1 = buffer_ld4(weight_data, (w_offsetv.x + x) + kernel_w * 1);
					afpvec4 u2 = buffer_ld4(weight_data, (w_offsetv.x + x) + kernel_w * 2);
					afpvec4 u3 = buffer_ld4(weight_data, (w_offsetv.x + x) + kernel_w * 3);
								
			                afpmat4 k32 = afpmat4(	u0.x, u1.x, u2.x, u3.x,
								u0.y, u1.y, u2.y, u3.y,
								u0.z, u1.z, u2.z, u3.z,
								u0.w, u1.w, u2.w, u3.w );
				
					afpvec4 uy0 = buffer_ld4(weight_data, (w_offsetv.y + x) + kernel_w * 0);
					afpvec4 uy1 = buffer_ld4(weight_data, (w_offsetv.y + x) + kernel_w * 1);
					afpvec4 uy2 = buffer_ld4(weight_data, (w_offsetv.y + x) + kernel_w * 2);
					afpvec4 uy3 = buffer_ld4(weight_data, (w_offsetv.y + x) + kernel_w * 3);
								
			                afpmat4 k33 = afpmat4(	uy0.x, uy1.x, uy2.x, uy3.x,
								uy0.y, uy1.y, uy2.y, uy3.y,
								uy0.z, uy1.z, uy2.z, uy3.z,
								uy0.w, uy1.w, uy2.w, uy3.w );					
					
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
                // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
                afpmat4 k0 = afpmat4(
                    buffer_ld4(weight_data, (w_offsetv.x + x) * 4 + 0),
                    buffer_ld4(weight_data, (w_offsetv.x + x) * 4 + 1),
                    buffer_ld4(weight_data, (w_offsetv.x + x) * 4 + 2),
                    buffer_ld4(weight_data, (w_offsetv.x + x) * 4 + 3)
                );
				
                afpmat4 k1 = afpmat4(
                    buffer_ld4(weight_data, (w_offsetv.y + x) * 4 + 0),
                    buffer_ld4(weight_data, (w_offsetv.y + x) * 4 + 1),
                    buffer_ld4(weight_data, (w_offsetv.y + x) * 4 + 2),
                    buffer_ld4(weight_data, (w_offsetv.y + x) * 4 + 3)
                );
#else
                //afpmat4 k0 = sfp2afpmat4(weight_data[w_offsetv.x + x]);
                //afpmat4 k1 = sfp2afpmat4(weight_data[w_offsetv.y + x]);
		//afpvec4 k0 = buffer_ld4(weight_data, (w_offsetv.x + x) * 4); // Load the weight value
		//afpvec4 k1 = buffer_ld4(weight_data, (w_offsetv.y + x) * 4); // Load the weight value
		//afpvec4 k0 = afpvec4(1.0f); // Load the weight value
		//afpvec4 k1 = afpvec4(1.0f); // Load the weight value
				
#endif
					
					sum20 += v0 * k32;
					sum21 += v1 * k32;
					sum22 += v0 * k33;
					sum23 += v1 * k33;
				}

				w_offsetv += kernel_w*4; 
			}
			
#endif	
	sum20 = activation_afpvec4(sum20, activation_type, activation_param_0, activation_param_1);
	sum21 = activation_afpvec4(sum21, activation_type, activation_param_0, activation_param_1);
	sum22 = activation_afpvec4(sum22, activation_type, activation_param_0, activation_param_1);
	sum23 = activation_afpvec4(sum23, activation_type, activation_param_0, activation_param_1);
	
#if NCNN_image_shader
    image2d_st1(top_blob, ivec3(gx2.x, gy2.x, gz2.x), sum0);
    image2d_st1(top_blob, ivec3(gx2.y, gy2.x, gz2.x), sum1);
    image2d_st1(top_blob, ivec3(gx2.x, gy2.y, gz2.x), sum2);
    image2d_st1(top_blob, ivec3(gx2.y, gy2.y, gz2.x), sum3);
#else
	if (gy + 1 < psc(outh) && gx + 1 < psc(outw)) buffer_st4(top_blob_data, gy2.x * psc(outw) + gx2.x, sum20);
	if (gy + 1 < psc(outh) && gx + 1 < psc(outw)) buffer_st4(top_blob_data, gy2.x * psc(outw) + gx2.y, sum21);
	if (gy + 1 < psc(outh) && gx + 1 < psc(outw)) buffer_st4(top_blob_data, gy2.y * psc(outw) + gx2.x, sum22);
	if (gy + 1 < psc(outh) && gx + 1 < psc(outw)) buffer_st4(top_blob_data, gy2.y * psc(outw) + gx2.y, sum23);
#endif

}
